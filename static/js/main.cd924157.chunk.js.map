{"version":3,"sources":["Result.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Result","state","fetch","then","res","json","result","console","log","setState","className","id","this","map","Students","name","rollNumber","marks","status","to","type","Component","Form","props","handleChange","event","preventDefault","target","value","errors","length","lastname","class","year","onChange","min","max","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd924157.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nexport class Result extends Component {\r\n    state={'Result' :[]}\r\n    componentDidMount()\r\n    {\r\n        let url='Result.json';\r\n        fetch(url)\r\n        .then(res=>res.json())\r\n        .then(result=>\r\n            {\r\n                console.log(result)\r\n                this.setState({Result:result});\r\n            })\r\n        }\r\n        render() {\r\n            return (\r\n                <div>\r\n                             <table className=\"tb\">\r\n                                 <th>Students Result Board</th>\r\n                                <tr id=\"rw1\">\r\n                                   <th>Student Name</th>\r\n                                   <th>Roll Number</th>\r\n                                   <th>Total Marks</th>\r\n                                   <th>Status</th>\r\n                                   </tr>\r\n                                   {this.state.Result.map(Students=>\r\n                                   <tr>\r\n                                   <td>{Students.name}</td>\r\n                                   <td>{Students.rollNumber}</td>\r\n                                   <td>{Students.marks}</td>\r\n                                   <td>{Students.status}</td>\r\n                                   </tr>\r\n            )}\r\n            </table>\r\n            <div className=\"btn\">\r\n            <Link to='./Form'>\r\n                <button type=\"button\" className=\"btn btn-info\">School Admission Form</button>\r\n            </Link>\r\n        </div>\r\n        </div>\r\n            )\r\n            }\r\n        }\r\nexport default Result\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport class Form extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            errors:{\r\n                name:'',\r\n                lastname:'',\r\n                class:'',\r\n                year:'',\r\n                marks:''\r\n            }\r\n        }\r\n    }\r\n    handleChange=(event)=>\r\n    {\r\n        event.preventDefault();\r\n        const {name,value}=event.target;\r\n        let errors=this.state.errors;\r\n        switch(name)\r\n        {\r\n            case 'name': \r\n            errors.name=value.length<20 ? 'Name must be 20 chanacter long':'';\r\n            break;\r\n            case 'lastname': \r\n            errors.name=value.length<20 ? 'LastName must be 20 chanacter long':'';\r\n            break;\r\n        }\r\n        this.setState({errors,[name]:value});\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"bdr\">\r\n                <h2 id=\"h2\">Students Submission Form</h2>\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <label>Name</label>\r\n                        <input type=\"text\" name=\"name\" className=\"form-control\" onChange={this.handleChange}/>\r\n                        {this.state.errors.name.length>0 && \r\n                        <span className=\"alert text-danger\">{this.state.errors.name}</span>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Last Name</label>\r\n                        <input type=\"text\" name=\"lastname\" className=\"form-control\" onChange={this.handleChange}/>\r\n                        {this.state.errors.lastname.length>0 && \r\n                        <span className=\"alert text-danger\">{this.state.errors.lastname}</span>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Class</label>\r\n                        <input type=\"text\" name=\"class\" className=\"form-control\" onChange={this.handleChange}/>\r\n                        {this.state.errors.class.length>0 && \r\n                        <span className=\"alert text-danger\">{this.state.errors.class}</span>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Year Of Passing</label>\r\n                        <input type=\"number\" name=\"year\" min=\"0\" max=\"2017\" className=\"form-control\" onChange={this.handleChange}/>\r\n                        {this.state.errors.year.length>0 && \r\n                        <span className=\"alert text-danger\">{this.state.errors.year}</span>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Percentage of marks</label>\r\n                        <input type=\"number\" name=\"marks\" className=\"form-control\" onChange={this.handleChange}/>\r\n                        {this.state.errors.marks.length>0 && \r\n                        <span className=\"alert text-danger\">{this.state.errors.marks}</span>}\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Submit\" className=\"btn btn-success\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\nimport './App.css';\nimport './Result.css';\nimport './Form.css';\nimport Result from './Result';\nimport Form from './Form';\nimport {Route,BrowserRouter as Router} from 'react-router-dom';\nimport {Link} from 'react-router-dom';\nfunction App() {\n  return (\n    \n    <Router>\n    <div>\n    <Route path='/' exact component={Result}/>\n    <Route path='/Form' exact component={Form}/>\n\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}